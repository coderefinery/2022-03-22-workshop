- workshop_title: CodeRefinery March 2022
- workshop_description: >
    This is part of the CodeRefinery March 2022 workshop.  The videos
    are available to everyone, but may be most useful to the people
    who attended the workshop and want to review later.


    Playlist: https://www.youtube.com/playlist?list=PLpLblYHCzJABxMUsrXAM4g8i2d9W4oyft

    Workshop webpage: https://coderefinery.github.io/2022-03-22-workshop/

    CodeRefinery: https://coderefinery.org/

# This input will be used for all segments until redefined
- input: day1-obs.mkv


# Preview icebreaker
- output: day1-preview.mkv
  title: 1.0 Preview icebreaker
  description: >-
    The pre-start discussion and icebreakers.  You probably want to go
    on to the next video.
  time:
    - start: 10:52
    - end: 20:22


# Intro
- output: day1-intro.mkv
  title: 1.1 Intro
  description: >
    The introduction to this workshop, explaining general mechanics
    and what CodeRefinery is.
  time:
    - start: 20:49
    - stop: 36:14


# Git-intro day 1
- output: day1-git-intro-1.mkv
  title: 1.2 Git Intro
  description: >
    Here, we go over the basics of git from first principles, though
    this is not the most basic course you can find.  We cover basics,
    motivation, making commits, undoing things, staging.  The part 2
    video goes into branching and merging, conflict resolution,
    inspecting history, basics of sharing repositories online, and
    some practical advice.  However, this does not cover multi-user
    work or remotes (that is the next lesson, git-collaborative).

    There are two external videos which are excluded from this
    recording.  You can find the link to them in the table of contents
    below.

    https://coderefinery.github.io/git-intro/

  time:
    - start: 38:17
    - -: Introductions
    - 39:50: Overview of the day
    - 00:43:16: Motivation to version control
    - 00:57:11: Basics (creating repo, adding, committing, etc.)
    - 01:13:56: "Exercise: recording changes"
    - end: 01:16:41
    - start: 01:41:26
    - -: Going over the exercise
    - 01:44:05: git history and log
    - 01:46:33: commit messages
    - 01:49:52: .gitignore
    - 01:52:57: Misc topics and summary
    - 01:53:58: Summary
    - 01:58:12: Branching and merging
    - 01:59:10: Motivation for branches
    - 02:04:39: '"git graph" alias'
    - 02:06:47: Branch basics
    - 02:08:14: Creating and working with branches
    - 02:14:37: "Exercise: create and commit to branches"
    - stop: 02:20:10
    - start: 02:45:01
    - -: Going over the exercise
    - 02:50:10: Merging branches
    - 02:54:24: Deleting branches
    - 02:57:53: Tags
    - 03:02:43: "Summary and Q&A"
    - 03:08:49: Conflict resolution
    - 03:08:49: What is a conflict?
    - stop: 03:13:04
    - start: 03:22:51
    - 03:23:39: Continue with three branches and making a conflict
    - 03:32:57: "Wrap-up of the day, Q&A"
    - stop: 03:48:54

# Day 2
- input: day2-obs.mkv

#- output: day2-intro.mkv
#  title: Day 2 introduction
#  description: >
#    The quick introduction to Day 2.  This is mainly icebreaker
#    discussion and practical matters.
#  time:
#    - start: 11:33
#    - end: 24:40

# Git-intro day 2
- output: day2-git-intro-2.mkv
  title: 2.1 Git Intro day 2
  description: >
    Part 2 of the previous video: https://www.youtube.com/watch?v=KxFn4hLhQ1E&list=PLpLblYHCzJABxMUsrXAM4g8i2d9W4oyft&index=3

    Here, we go over the basics of git from first principles, though
    this is not the most basic course you can find.  Previous video:
    We covered basics, motivation, making commits, undoing things,
    staging.  This part 2 video goes into remotes and basics of
    sharing repositories online, inspecting history, undoing and
    recovering, and some practical advice.  However, this does not
    cover multi-user work or remotes (that is the next lesson,
    git-collaborative).

    https://coderefinery.github.io/git-intro/

  time:
    - start: 00:25:10
    - -: Plan of today
    - 00:26:13: Sharing repositories online
    - 01:04:21: Inspecting history
    - stop: 01:25:13
    - start: 01:35:36
    - -: Small clarifications
    - 01:37:48: "Exercises: inspecting history"
    - stop: 01:43:00
    - start: 02:16:48
    - -: Wrap-up of inspecting history
    - stop: 02:28:00
    - start: 02:39:06
    - -: Undoing and recovering
    - 02:56:51: "Exercises: undoing and recovering"
    - stop: 02:59:19
    - start: 03:22:17
    - -: Recovering from committing to the wrong branch (cherry-pick)
    - stop: 03:30:56
    - start: 03:37:25
    - 03:38:39: The staging area
    - 03:44:42: Practical advice
    - 03:50:43: Final discussion, feedback, etc.
    - stop: 03:54:10


# Day 3
- input: day3-obs.mkv

- output: day3-intro.mkv
  title: Day 3 intro
  description: >
    The quick introduction to day 3.  This skips the icebreaker but
    shows how we actually use the very tools in this workshop through
    all of CodeRefinery.
  time:
    #Remove part before the start
    # soft start
    - start: 00:14:22
    - stop: 00:18:20



- output: day3-git-collab.mkv
  title: Git collaborative
  description: >
      Today, we expand from using git by yourself to using it in a team.  We use Github, centralized workflows, pull requests, and more.
  time:
    - start: 00:19:26
    - -: Intro
    - 00:23:52: Overview, summary of the day
    - 00:25:40: Concepts around collaboration
    - 00:38:26: Centralized workflow
    - 00:43:20: "Exercise Centralized-1: creating a pull request"
    - stop: 00:58:57
    - start: 00:59:58
    - stop: 01:13:54
    - start: 01:25:21
    - stop: 01:26:23
    - start: 01:35:59
    - -: Exercise as a demo
    - 01:44:38: Discussion
    - 01:49:30: "Exercise Centralized-2: reviewing the pull requests"
    - stop: 02:19:07
    - start: 02:29:58
    - -: More discussion and commenting on / reviewing / suggesting changes pull requests
    - stop: 02:34:12
    - start: 02:48:29
    - -: Distributed version control and forking workflow
    - 02:56:37: "Exercise Distributed-1"
    - stop: 03:05:41
    - start: 03:13:14
    - -: Exercise as a demo
    - stop: 03:20:57
    - start: 03:30:36
    - -: Discussion about distributed version control
    - 03:43:16: How to contribute changes to someone else's project
    - 03:46:28: "Feedback, Q&A, what comes next week"
    - stop: 03:49:54
    - 03:54:23: "Wrap up: of the week: three levels of git (yourself, small team, the world)"
    - stop: 04:02:39

#- input: cr-2021may-day4-obs.mkv
#
#- output: day4-intro.mkv
#  title: Second week introduction
#  description: >
#    The introduction to the second week, where we go into slightly more detail about what we will cover this week and how it fits together.
#  time:
#    - start: 10:15
#    - end: 15:20
#    #- ????: Intro
#
#- output: day4-reproducible-research.mkv
#  title: Reproducible Research
#  description: >
#    If you can't get your code to do the same thing again, is it
#    really science?  Or more practically, are you able to do your
#    work?  Reproducibilty is a big deal, but we don't always learn how
#    to do it.  In this lesson, we cover the basics, how to organize
#    projects, record computational steps with Snakemake or other
#    workflow managers, how to record environments with conda (and docker
#    a bit), and sharing code and data (FAIR).
#
#    https://coderefinery.github.io/reproducible-research/
#
#  time:
#    - start: 15:28   # first session before break, exclude meta
#    - end: 1:05:10
#    - 15:28: "Introduction"
#    - 17:00: "Motivation"
#    - 23:20: "Organizing your projects"
#    - 31:25: "Begin the word-count example"
#    - 39:15: "Dependencies"
#    - 51:40: "Type-along: Conda environment"
#    - end: 1:04:50
#    - start: 1:16:20
#    - 1:17:48: "Containers"
#    - 1:22:58: "Recording computational steps"
#    - 1:25:00: "Exercise preparation: Snakemake"
#    - end: 1:33:30
#
#    - start: 1:38:45
#    - 1:38:45: "Snakemake exercise demo"
#    - end: 1:45:35
#
#    - start: 1:55:20
#    - 1:55:25: "Sharing research data"
#    - end:   2:00:40
#
#    - start: 2:05:25
#    - 2:05:25: Instructor discussion
#    - end:   2:08:08
#
#    - start: 2:12:41
#    - 2:13:00: Fair principles
#    - end: 2:15:34
#
#- output: day4-social-coding.mkv
#  title: Social coding
#  description: >
#    We don't just program for ourselves: we are part of a community.  As scientists, we want to get citations, so how can our software support this?  Our work is a constant balance between using the work of others and hoping that others will use our work.  In this lesson, we talk about the advantages and disadvantages of others building on our work, and how to support that.
#
#    We cover best practices for software/data projects, requirements for sharing, copyright, licensing, citation, and more.
#
#    https://coderefinery.github.io/social-coding/
#  time:
#    - 2:26:55, 2:31:15
#    - 2:26:55: Intro
#    - 2:27:50: Social Coding
#    # Break for answering questions
#    - 2:34:55, 3:01:00
#    - 2:58:10: "Exercise: how to make a repository more reusable?"
#    - 3:07:45, 3:12:20
#    #- 3:16:14-17??  Learner in video
#    - cover: {begin: "3:16:14", end: "3:16:17", w: 840, h: 300, x: 360}
#    - 3:14:25, 3:17:20
#    - 3:22:05, 3:38:30
#    - 3:22:05: Licensing
#    - 3:35:30: Practical recommendations
#    - 3:37:05: Software citation
#
#- output: day4-outro.mkv
#  title: Day 4 final remarks
#  description: >
#    ...
#  time:
#    - 3:38:30, 3:39:42
#
#- input: cr-2021may-day5-obs.mkv
#
#- output: day5-intro.mkv
#  title: Day 5 introduction
#  description: >
#    The quick introduction to Day 5.
#  time:
#    - 5:00, 6:10 # talking about icebreaker
#    - 8:25, 9:05
#    - 13:15, 20:50     #
#    - 15:00: Jupyter getting started
#
#
#- output: day5-jupyter.mkv
#  title: Jupyter
#  description: >
#    The goal of this lesson is to teach learners the user interface of JupyterLab, how Jupyter notebooks work, and what some common and powerful usecases are. Our focus is to demonstrate and discuss and guide towards good practices for reproducibility, collaboration, and reusability. The emphasis of this lesson is to demonstrate how to use notebooks in combination with version control and how to share reproducible notebooks via Binder.
#
#    This lesson demonstrates the use of JupyterLab, nbdime, jupyterlab-git, and Binder.
#
#    https://coderefinery.github.io/jupyter/
#  time:
#    - cover: {begin: "41:29", end: "41:35", w: 840, h: 300, x: 360}
#    - 20:50, 1:00:30   # episode, Exercise as a demo
#    - 1:01:20, 1:18:24         # After exercise
#    - 1:32:50, 1:49:50
#                          # 1:15:45 Thor in video
#    - 1:53:25, 1:55:20
#    - 20:50: Motivation, pitfalls, best practices
#    # 32:50 Sabry appears
#    - 37:41: Interface
#    # Diana name at 44:30
#    - 42:10: "Exercise: Darts and the interface"
#    - 50:00: "Demo: Darts exercise plus explanation"
#    - 1:01:20: Post-exercise discussion
#    - 1:11:20: Git and notebooks
#    - 1:32:50: Binder and sharing notebooks
#
#- output: day5-documentation.mkv
#  title: Documentation
#  description: >
#    In this lesson we discuss different solutions for implementing and deploying code documentation. We start by creating a wishlist for how we would code documentation like to be. Then after a tour of available tools, we discuss how to write useful and accessible READMEs, and then we progress by demonstrating and practicing the Sphinx documentation generator and demonstrate how to deploy documentation to Read the Docs service.
#
#    Topics and tools discussed: Markdown, reStructured text, README documentation, table of contents generation, Sphinx, Read the Docs, GitHub/GitLab pages.
#
#    https://coderefinery.github.io/documentation/
#  time:
#    - 1:59:55, 2:26:25
#    - 2:27:00, 2:40:05
#    - 2:40:55, 2:44:00
#    # 2:30:00 Stefan in video
#    # 2:38:00 - 29:31 Johan in stream
#    - 2:53:50, 3:21:15
#    - 3:22:25, 3:45:00
#    - 3:47:13, 4:02:54
#
#    - 2:00:00: Intro
#    - 2:01:00: Motivation
#    - 2:14:20: Popular tools
#    - 2:21:20: Readme files
#    - 2:23:55: "Exercise: Readme files"
#    - 2:53:50: Sphinx documentation
#    - 2:57:30: Sphinx type-along
#    - 3:19:40: Sphinx exercise
#    - 3:22:25: Sphinx exercise demo
#    - 3:36:45: What comes next
#    - 3:39:00: ReadTheDocs summary
#    - 3:40:50: Github Pages summary
#    - 3:42:40: Summary, eend of day
#    - 3:47:13: ReadTheDocs demo
#
#
#- input: cr-2021may-day6-obs.mkv
#
#- output: day6-intro.mkv
#  title: Day 6 intro
#  description: >
#    The quick introduction to Day 6.
#  time:
#    - start: 15:47
#    - end: 19:10
#
#- output: day6-testing.mkv
#  title: Software Testing
#  description: >
#    Software testing is a fundamental part of modern software development, and especially important for science since results should be correct.  Luckily, it's not so hard to get started, and anyone can do it. This is a crash course for scientists to get started testing their software.
#
#    Tools covered include concepts of testing for science, unit testing, pytest, continuous integration, GitHub actions .  We make demos in Python, but have examples in other languages and this will apply to every language in some form.
#
#    https://coderefinery.github.io/testing/
#
#  time:
#    - start: 19:10
#    - 19:10: Intro
#    - 22:05: Motivation
#    - 32:20: Concepts
#    - 41:10: Q&A
#    - 45:00: "Exercise: testing locally"
#    - cover: {begin: "45:48", end: "46:04", w: 840, h: 300, x: 360}
#    - end: 47:27
#    - start: 48:25
#    - 48:25: Exercise as a demo
#    - end: 54:00 # ???
#    #- start: 1:03:00  # ???, Small discussion but said again once people are back
#    #- end:
#    - start: 1:06:50
#    - 1:06:50: Q&A
#    - 1:08:10: Automated testing with CI
#    #- 1:11:25: CI step 1-2
#    #- 1:29:50: Step 7: Fix the broken test
#    #- 1:34:00 Step 8: Open a pull request
#    - 1:36:30: Q&A, summary of automated testing
#    - 1:37:55: Test design, exercise prepration
#    - end: 1:43:00
#    - start: 2:16:45
#    - end: 2:17:08
#
#- output: day6-modular-code-development.mkv
#  title: Modular Code Development
#  description: >
#    In this live-coding demo session we take a Python script as starting point which reads data, computes simple statistics, and generates a plot. Together we then improve this code based on suggestions from the audience to arrive at a more reusable code with reusable components. We start in the Jupyter notebook, later move to a Python script/module, introduce testing, and finally introduce and motivate a command line interface to our code.
#
#    In this demonstration we use JupyterLab, Python, Pandas,
#    Matplotlib, pytest, and Click.  It is also a great demonstration
#    of pair programming.
#
#    https://coderefinery.github.io/modular-type-along/
#  time:
#    - start: 2:17:50
#    - 2:17:50: Intro and questions to the audience
#    - cover: {begin: "2:22:20", end: "2:22:26", w: 840, h: 100, x: 600}
#    # Max at 2:26:30
#    - 2:36:15: "Modular type-along"
#    - 2:38:10: Starting with Jupyter
#    - 2:44:00: Functions
#    - end: 3:04:40
#    - start: 3:10:50
#    - 3:10:50: Some questions
#    - 3:14:10: Moving out of the notebook
#    - cover: {begin: "3:15:03", end: "3:15:09", w: 840, h: 165, x: 540}
#    - 3:24:05: Adding a command line interface
#    - 3:32:20: Wrap-up
#    - end: 3:33:30e
#
#- output: day6-outro.mkv
#  title: Workshop outro
#  description: >
#      The concluding remarks of the workshop.
#  time:
#    - start: 3:35:10
#    - end: 3:47:17
